pipeline {
    agent {
        kubernetes {
            yamlFile 'Pipelines/CI/kaniko-agent.yaml'
        }
    }

    environment {
        IMAGE_NAME = 'app-nodejs'
        IMAGE_TAG = 'latest'
        REGISTRY_URL = 'docker.io/alaa872/'
        AWS_REGION = 'us-east-1'
        SECRET_NAME = 'dockerhubcredentials'
    }

    stages {
        stage('Fetch Docker Hub Credentials') {
            steps {
                container('jnlp') {
                    script {
                        withAWS(credentials: 'aws-credentials-id', region: env.AWS_REGION) {
                            def secret = awsSecretsManager(secrets: [[name: env.SECRET_NAME, versionStage: 'AWSCURRENT']])
                            withCredentials([usernamePassword(credentialsId: 'dockerhubcredentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD', secret: secret)]) {
                                echo "DOCKER_USERNAME: ${env.DOCKER_USERNAME}"
                                echo "DOCKER_PASSWORD: ${env.DOCKER_PASSWORD}"
                            }
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                container('kaniko') {
                    script {
                        sh """
                        echo "Docker Username: ${env.DOCKER_USERNAME}"
                        echo "Docker Password: ${env.DOCKER_PASSWORD}"
                        echo "Dockerfile path: dockerfile"
                        echo "Context path: /workspace"
                        echo "Destination: ${env.REGISTRY_URL}${env.IMAGE_NAME}:${env.IMAGE_TAG}"

                        /kaniko/executor --dockerfile=dockerfile --context=/workspace --destination=${env.REGISTRY_URL}${env.IMAGE_NAME}:${env.IMAGE_TAG} --verbosity=debug
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/kaniko-build.log', allowEmptyArchive: true
        }
    }
}